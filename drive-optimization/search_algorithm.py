"""
Drive File Relevance Scoring
Generated by Archie - Autonomous Agent

Purpose: Ranks files by how well they match your search
Impact: Find documents faster with better accuracy
Risk Level: LOW
"""

from datetime import datetime
from typing import List, Dict, Any
import os


class DriveSearchAlgorithm:
    """Smart ranking algorithm for Google Drive files"""

    # Weights for different matching factors
    WEIGHTS = {
        'name_exact_match': 0.40,
        'name_partial_match': 0.20,
        'content_match': 0.25,
        'file_type_bonus': 0.10,
        'recency_bonus': 0.05
    }

    # Preferred file types (get ranking boost)
    PREFERRED_TYPES = {
        'application/vnd.google-apps.document': 'Google Doc',
        'application/vnd.google-apps.spreadsheet': 'Google Sheet',
        'application/pdf': 'PDF',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word Doc'
    }

    def calculate_score(self, file: Dict[str, Any], query: str) -> float:
        """
        Calculate relevance score for a file.

        Args:
            file: Drive file object with name, content, type, date
            query: Search query

        Returns:
            Relevance score (0.0 to 1.0)
        """
        score = 0.0
        query_lower = query.lower()

        # Name matching
        if 'name' in file:
            name_lower = file['name'].lower()

            # Exact match in filename
            if query_lower == name_lower:
                score += self.WEIGHTS['name_exact_match']
            # Partial match in filename
            elif query_lower in name_lower:
                score += self.WEIGHTS['name_exact_match'] * 0.8
            # Word match in filename
            elif any(word in name_lower for word in query_lower.split()):
                score += self.WEIGHTS['name_partial_match']

        # Content matching (if available)
        if 'content' in file and file['content']:
            content_lower = file['content'].lower()
            if query_lower in content_lower:
                score += self.WEIGHTS['content_match']
            elif any(word in content_lower for word in query_lower.split()):
                score += self.WEIGHTS['content_match'] * 0.5

        # File type bonus
        if 'mimeType' in file:
            if file['mimeType'] in self.PREFERRED_TYPES:
                score += self.WEIGHTS['file_type_bonus']

        # Recency bonus
        if 'modifiedTime' in file:
            try:
                modified = datetime.fromisoformat(file['modifiedTime'].replace('Z', '+00:00'))
                days_old = (datetime.now(modified.tzinfo) - modified).days

                if days_old < 7:
                    score += self.WEIGHTS['recency_bonus']
                elif days_old < 30:
                    score += self.WEIGHTS['recency_bonus'] * 0.5
            except:
                pass

        return min(score, 1.0)

    def rank_files(self, files: List[Dict[str, Any]], query: str) -> List[Dict[str, Any]]:
        """
        Rank files by relevance.

        Args:
            files: List of Drive file objects
            query: Search query

        Returns:
            Sorted list with relevance scores
        """
        # Calculate scores
        for file in files:
            file['_relevance_score'] = self.calculate_score(file, query)

        # Sort by score (highest first)
        ranked = sorted(files, key=lambda f: f.get('_relevance_score', 0), reverse=True)

        return ranked


if __name__ == '__main__':
    # Test
    print("Testing Drive search algorithm...")

    algorithm = DriveSearchAlgorithm()

    test_files = [
        {
            'name': 'Project Budget 2025.xlsx',
            'mimeType': 'application/vnd.google-apps.spreadsheet',
            'modifiedTime': '2025-10-18T10:00:00Z',
            'content': 'Budget breakdown for Q4 project'
        },
        {
            'name': 'Meeting Notes.docx',
            'mimeType': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'modifiedTime': '2025-10-15T10:00:00Z',
            'content': 'Discussed project timeline and budget'
        },
        {
            'name': 'Vacation Photos',
            'mimeType': 'application/vnd.google-apps.folder',
            'modifiedTime': '2025-09-01T10:00:00Z',
            'content': ''
        }
    ]

    results = algorithm.rank_files(test_files, 'project budget')

    print("\nRanked results for 'project budget':")
    for file in results:
        print(f"  Score: {file['_relevance_score']:.2f} - {file['name']}")
