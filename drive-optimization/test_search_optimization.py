"""
Performance Tests for Drive Search Optimization
Generated by Archie - Autonomous Agent

Purpose: Verifies effectiveness of optimizations
Impact: Ensures optimizations meet performance and relevance criteria
Risk Level: LOW
"""

import time
from datetime import datetime
from search_algorithm import DriveSearchAlgorithm
from file_support import DriveFileSupport
from caching_layer import DriveCachingLayer
from quota_monitor import DriveQuotaMonitor


class DriveOptimizationTests:
    """Test suite for Drive optimizations"""

    def __init__(self):
        """Initialize test suite"""
        self.algorithm = DriveSearchAlgorithm()
        self.cache = DriveCachingLayer(ttl_seconds=300)
        self.quota_monitor = DriveQuotaMonitor()
        self.test_results = []

    def test_search_speed(self) -> Dict:
        """Test search response time"""
        print("\n[Test 1] Search Speed Test...")

        test_files = self._generate_test_files(100)

        # Measure search time
        start = time.time()
        results = self.algorithm.rank_files(test_files, 'project report')
        elapsed = time.time() - start

        passed = elapsed < 2.0  # Target: <2 seconds

        result = {
            'test': 'Search Speed',
            'elapsed_ms': round(elapsed * 1000, 2),
            'target_ms': 2000,
            'passed': passed,
            'results_count': len(results)
        }

        self.test_results.append(result)
        print(f"  Time: {result['elapsed_ms']}ms")
        print(f"  Target: <2000ms")
        print(f"  Status: {'✅ PASS' if passed else '❌ FAIL'}")

        return result

    def test_relevance_score(self) -> Dict:
        """Test ranking accuracy"""
        print("\n[Test 2] Relevance Ranking Test...")

        test_files = [
            {'name': 'Project Report Q4 2025.docx', 'mimeType': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'modifiedTime': '2025-10-19T10:00:00Z'},
            {'name': 'Meeting Notes.txt', 'mimeType': 'text/plain', 'modifiedTime': '2025-10-18T10:00:00Z'},
            {'name': 'Budget.xlsx', 'mimeType': 'application/vnd.google-apps.spreadsheet', 'modifiedTime': '2025-10-17T10:00:00Z'},
        ]

        results = self.algorithm.rank_files(test_files, 'project report')

        # Check if best match is first
        top_result = results[0]
        passed = 'Project Report' in top_result['name'] and top_result['_relevance_score'] > 0.5

        result = {
            'test': 'Relevance Ranking',
            'top_result': top_result['name'],
            'top_score': top_result['_relevance_score'],
            'target_score': 0.5,
            'passed': passed
        }

        self.test_results.append(result)
        print(f"  Top result: {top_result['name']}")
        print(f"  Score: {top_result['_relevance_score']}")
        print(f"  Status: {'✅ PASS' if passed else '❌ FAIL'}")

        return result

    def test_caching(self) -> Dict:
        """Test caching performance"""
        print("\n[Test 3] Caching Test...")

        query = 'test query'
        test_data = [{'name': 'file1'}, {'name': 'file2'}]

        # First request (cache miss)
        start1 = time.time()
        self.cache.set(query, test_data)
        time.sleep(0.001)  # Simulate API call
        elapsed1 = time.time() - start1

        # Second request (cache hit)
        start2 = time.time()
        cached = self.cache.get(query)
        elapsed2 = time.time() - start2

        speedup = elapsed1 / elapsed2 if elapsed2 > 0 else 0
        passed = cached is not None and speedup > 1

        result = {
            'test': 'Caching',
            'cache_hit': cached is not None,
            'speedup': round(speedup, 1),
            'passed': passed
        }

        self.test_results.append(result)
        print(f"  Cache hit: {'✅ Yes' if cached else '❌ No'}")
        print(f"  Speedup: {speedup}x faster")
        print(f"  Status: {'✅ PASS' if passed else '❌ FAIL'}")

        return result

    def test_file_type_support(self) -> Dict:
        """Test file type handling"""
        print("\n[Test 4] File Type Support Test...")

        test_files = [
            {'name': 'doc.docx', 'mimeType': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'},
            {'name': 'sheet.xlsx', 'mimeType': 'application/vnd.google-apps.spreadsheet'},
            {'name': 'pdf.pdf', 'mimeType': 'application/pdf'},
            {'name': 'image.png', 'mimeType': 'image/png'},  # Unsupported
        ]

        supported = DriveFileSupport.filter_supported(test_files)
        passed = len(supported) == 3  # Should filter out image

        result = {
            'test': 'File Type Support',
            'total_files': len(test_files),
            'supported_files': len(supported),
            'expected': 3,
            'passed': passed
        }

        self.test_results.append(result)
        print(f"  Supported: {len(supported)}/{len(test_files)}")
        print(f"  Status: {'✅ PASS' if passed else '❌ FAIL'}")

        return result

    def test_quota_monitoring(self) -> Dict:
        """Test quota monitoring"""
        print("\n[Test 5] Quota Monitoring Test...")

        # Simulate 100 API calls
        for i in range(100):
            self.quota_monitor.record_call('/drive/v3/files', 'search')

        report = self.quota_monitor.get_usage_report()
        passed = report['daily_usage'] == 1000  # 100 searches * 10 quota each

        result = {
            'test': 'Quota Monitoring',
            'recorded_usage': report['daily_usage'],
            'expected_usage': 1000,
            'percentage': report['daily_percentage'],
            'passed': passed
        }

        self.test_results.append(result)
        print(f"  Quota used: {report['daily_usage']}")
        print(f"  Status: {'✅ PASS' if passed else '❌ FAIL'}")

        return result

    def _generate_test_files(self, count: int) -> list:
        """Generate test files"""
        files = []
        for i in range(count):
            files.append({
                'name': f'File {i}.docx',
                'mimeType': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'modifiedTime': '2025-10-19T10:00:00Z',
                'content': f'Test content for file {i}'
            })
        return files

    def run_all_tests(self) -> None:
        """Run all tests"""
        print("=" * 60)
        print("Drive Search Optimization - Performance Tests")
        print("=" * 60)

        self.test_search_speed()
        self.test_relevance_score()
        self.test_caching()
        self.test_file_type_support()
        self.test_quota_monitoring()

        print("\n" + "=" * 60)
        print("Test Results Summary")
        print("=" * 60)

        passed = sum(1 for r in self.test_results if r['passed'])
        total = len(self.test_results)

        for result in self.test_results:
            status = "✅ PASS" if result['passed'] else "❌ FAIL"
            print(f"  {result['test']}: {status}")

        print(f"\n  Total: {passed}/{total} tests passed")

        if passed == total:
            print("\n🎉 All tests passed! Drive search optimization verified.")
        else:
            print(f"\n⚠️ {total - passed} test(s) failed. Review optimization.")


if __name__ == '__main__':
    suite = DriveOptimizationTests()
    suite.run_all_tests()
