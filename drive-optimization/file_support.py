"""
Multi-Type File Support
Generated by Archie - Autonomous Agent

Purpose: Handles PDFs, Word docs, spreadsheets, presentations
Impact: No more missing files of different types
Risk Level: LOW
"""

from typing import Set, Dict, Optional


class DriveFileSupport:
    """Utility for checking supported file types"""

    # Supported MIME types
    SUPPORTED_TYPES = {
        # Google Workspace files
        'application/vnd.google-apps.document': {
            'name': 'Google Docs',
            'icon': '📄',
            'searchable': True
        },
        'application/vnd.google-apps.spreadsheet': {
            'name': 'Google Sheets',
            'icon': '📊',
            'searchable': True
        },
        'application/vnd.google-apps.presentation': {
            'name': 'Google Slides',
            'icon': '📽️',
            'searchable': True
        },

        # Microsoft Office
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {
            'name': 'Word Document',
            'icon': '📝',
            'searchable': True
        },
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
            'name': 'Excel Spreadsheet',
            'icon': '📈',
            'searchable': True
        },
        'application/vnd.openxmlformats-officedocument.presentationml.presentation': {
            'name': 'PowerPoint',
            'icon': '📊',
            'searchable': True
        },

        # PDFs
        'application/pdf': {
            'name': 'PDF',
            'icon': '📕',
            'searchable': True
        },

        # Text files
        'text/plain': {
            'name': 'Text File',
            'icon': '📃',
            'searchable': True
        },

        # Folders
        'application/vnd.google-apps.folder': {
            'name': 'Folder',
            'icon': '📁',
            'searchable': False
        }
    }

    @classmethod
    def is_supported(cls, mime_type: str) -> bool:
        """
        Check if file type is supported.

        Args:
            mime_type: MIME type string

        Returns:
            True if supported
        """
        return mime_type in cls.SUPPORTED_TYPES

    @classmethod
    def is_searchable(cls, mime_type: str) -> bool:
        """
        Check if file content can be searched.

        Args:
            mime_type: MIME type string

        Returns:
            True if file content is searchable
        """
        if not cls.is_supported(mime_type):
            return False

        return cls.SUPPORTED_TYPES[mime_type]['searchable']

    @classmethod
    def get_file_info(cls, mime_type: str) -> Optional[Dict[str, str]]:
        """
        Get file type information.

        Args:
            mime_type: MIME type string

        Returns:
            File info dict or None if unsupported
        """
        return cls.SUPPORTED_TYPES.get(mime_type)

    @classmethod
    def get_icon(cls, mime_type: str) -> str:
        """
        Get emoji icon for file type.

        Args:
            mime_type: MIME type string

        Returns:
            Emoji icon
        """
        info = cls.get_file_info(mime_type)
        return info['icon'] if info else '📄'

    @classmethod
    def get_name(cls, mime_type: str) -> str:
        """
        Get human-readable name for file type.

        Args:
            mime_type: MIME type string

        Returns:
            File type name
        """
        info = cls.get_file_info(mime_type)
        return info['name'] if info else 'Unknown'

    @classmethod
    def filter_supported(cls, files: list) -> list:
        """
        Filter list to only supported file types.

        Args:
            files: List of file objects with mimeType

        Returns:
            Filtered list
        """
        return [f for f in files if cls.is_supported(f.get('mimeType', ''))]


if __name__ == '__main__':
    # Test
    print("Testing file type support...")

    test_files = [
        {'name': 'Report.docx', 'mimeType': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'},
        {'name': 'Budget.xlsx', 'mimeType': 'application/vnd.google-apps.spreadsheet'},
        {'name': 'Presentation.pptx', 'mimeType': 'application/vnd.openxmlformats-officedocument.presentationml.presentation'},
        {'name': 'Image.png', 'mimeType': 'image/png'},
        {'name': 'Document.pdf', 'mimeType': 'application/pdf'},
    ]

    supported = DriveFileSupport.filter_supported(test_files)

    print(f"\nTotal files: {len(test_files)}")
    print(f"Supported files: {len(supported)}")
    print("\nSupported file details:")

    for file in supported:
        mime = file['mimeType']
        icon = DriveFileSupport.get_icon(mime)
        name = DriveFileSupport.get_name(mime)
        searchable = "✓" if DriveFileSupport.is_searchable(mime) else "✗"
        print(f"  {icon} {file['name']} ({name}) - Searchable: {searchable}")
