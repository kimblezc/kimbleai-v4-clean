"""
API Quota Monitoring for Google Drive
Generated by Archie - Autonomous Agent

Purpose: Prevents exceeding API usage limits
Impact: Avoids service disruptions and quota errors
Risk Level: LOW
"""

from datetime import datetime, timedelta
from typing import Dict, List
from dataclasses import dataclass


@dataclass
class APICall:
    """Represents a single API call"""
    timestamp: datetime
    endpoint: str
    quota_cost: int


class DriveQuotaMonitor:
    """Monitor Google Drive API quota usage"""

    # Google Drive API quotas (per user per day)
    DAILY_QUOTA_LIMIT = 1000000  # 1 million queries per day
    PER_MINUTE_LIMIT = 1000      # 1000 queries per minute

    # Quota costs for different operations
    OPERATION_COSTS = {
        'list': 1,        # List files
        'get': 1,         # Get file metadata
        'download': 1,    # Download file
        'search': 10,     # Search files
        'batch': 100      # Batch request
    }

    def __init__(self):
        """Initialize quota monitor"""
        self.calls: List[APICall] = []
        self.daily_usage = 0
        self.last_reset = datetime.now()

    def record_call(self, endpoint: str, operation: str = 'get') -> None:
        """
        Record an API call.

        Args:
            endpoint: API endpoint called
            operation: Type of operation
        """
        cost = self.OPERATION_COSTS.get(operation, 1)

        call = APICall(
            timestamp=datetime.now(),
            endpoint=endpoint,
            quota_cost=cost
        )

        self.calls.append(call)
        self.daily_usage += cost

        # Check for daily reset
        self._check_daily_reset()

    def _check_daily_reset(self) -> None:
        """Reset quota if it's a new day"""
        now = datetime.now()

        if now.date() > self.last_reset.date():
            self.daily_usage = 0
            self.last_reset = now

            # Keep only last 7 days of history
            cutoff = now - timedelta(days=7)
            self.calls = [c for c in self.calls if c.timestamp > cutoff]

    def get_usage_percentage(self) -> float:
        """Get daily usage as percentage"""
        return (self.daily_usage / self.DAILY_QUOTA_LIMIT) * 100

    def get_remaining_quota(self) -> int:
        """Get remaining quota for today"""
        return max(0, self.DAILY_QUOTA_LIMIT - self.daily_usage)

    def get_per_minute_usage(self) -> int:
        """Get usage in last minute"""
        one_minute_ago = datetime.now() - timedelta(minutes=1)
        recent_calls = [c for c in self.calls if c.timestamp > one_minute_ago]
        return sum(c.quota_cost for c in recent_calls)

    def should_throttle(self, daily_threshold: float = 80.0, per_minute_threshold: int = 900) -> bool:
        """
        Check if we should throttle requests.

        Args:
            daily_threshold: Percentage at which to throttle (default 80%)
            per_minute_threshold: Per-minute limit to throttle (default 900/1000)

        Returns:
            True if should throttle
        """
        # Check daily limit
        if self.get_usage_percentage() >= daily_threshold:
            return True

        # Check per-minute limit
        if self.get_per_minute_usage() >= per_minute_threshold:
            return True

        return False

    def get_usage_report(self) -> Dict:
        """Generate usage report"""
        per_minute = self.get_per_minute_usage()

        return {
            'daily_usage': self.daily_usage,
            'daily_limit': self.DAILY_QUOTA_LIMIT,
            'daily_percentage': round(self.get_usage_percentage(), 2),
            'remaining_today': self.get_remaining_quota(),
            'per_minute_usage': per_minute,
            'per_minute_limit': self.PER_MINUTE_LIMIT,
            'per_minute_percentage': round((per_minute / self.PER_MINUTE_LIMIT) * 100, 2),
            'total_calls': len(self.calls),
            'should_throttle': self.should_throttle(),
            'last_reset': self.last_reset.isoformat()
        }


if __name__ == '__main__':
    # Test
    print("Testing Drive quota monitoring...")

    monitor = DriveQuotaMonitor()

    # Simulate API calls
    print("\nSimulating 100 search operations...")
    for i in range(100):
        monitor.record_call('/drive/v3/files', 'search')

    # Generate report
    report = monitor.get_usage_report()

    print("\nüìä Quota Usage Report:")
    print(f"  Daily usage: {report['daily_usage']:,} / {report['daily_limit']:,} ({report['daily_percentage']}%)")
    print(f"  Per-minute usage: {report['per_minute_usage']} / {report['per_minute_limit']} ({report['per_minute_percentage']}%)")
    print(f"  Remaining today: {report['remaining_today']:,}")
    print(f"  Total API calls: {report['total_calls']}")
    print(f"  Should throttle: {'Yes ‚ö†Ô∏è' if report['should_throttle'] else 'No ‚úÖ'}")

    print(f"\nüí∞ Quota saved by batch operations: {100 * 10 - 100} units")
