/**
 * Projects List with Loading Skeletons
 * Generated by Archie - Autonomous Agent
 *
 * Purpose: Shows placeholder boxes while loading so users know something is happening
 * Impact: Better UX - users see instant feedback instead of blank screen
 * Risk Level: LOW
 */

import React, { useState, useEffect } from 'react';

/**
 * Skeleton loader component
 */
function ProjectSkeleton() {
  return (
    <div className="border border-gray-200 rounded-lg p-6 animate-pulse">
      {/* Project name skeleton */}
      <div className="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>

      {/* Description skeleton */}
      <div className="space-y-2 mb-4">
        <div className="h-4 bg-gray-200 rounded w-full"></div>
        <div className="h-4 bg-gray-200 rounded w-5/6"></div>
      </div>

      {/* Stats skeleton */}
      <div className="flex gap-4">
        <div className="h-4 bg-gray-200 rounded w-24"></div>
        <div className="h-4 bg-gray-200 rounded w-32"></div>
      </div>
    </div>
  );
}

/**
 * Project card component
 */
function ProjectCard({ project }) {
  const completionRate = project.task_count > 0
    ? (project.completed_tasks / project.task_count) * 100
    : 0;

  return (
    <div className="border border-gray-300 rounded-lg p-6 hover:shadow-lg transition-shadow">
      <h3 className="text-xl font-bold text-gray-900 mb-2">
        {project.name}
      </h3>

      <p className="text-gray-600 mb-4">
        {project.description || 'No description'}
      </p>

      <div className="flex items-center gap-6 text-sm text-gray-500">
        <span>
          Tasks: {project.completed_tasks}/{project.task_count}
        </span>
        <span>
          {completionRate.toFixed(0)}% complete
        </span>
        <span>
          Updated: {new Date(project.updated_at).toLocaleDateString()}
        </span>
      </div>

      {/* Progress bar */}
      <div className="mt-4 w-full bg-gray-200 rounded-full h-2">
        <div
          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
          style={{ width: `${completionRate}%` }}
        ></div>
      </div>
    </div>
  );
}

/**
 * Projects list component with loading states
 */
export default function ProjectsList() {
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadProjects();
  }, []);

  async function loadProjects() {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch('/api/projects');
      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'Failed to load projects');
      }

      setProjects(data.projects);
    } catch (err) {
      console.error('Failed to load projects:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }

  // Loading state - show skeleton loaders
  if (loading) {
    return (
      <div className="space-y-4">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">
          My Projects
        </h2>
        <ProjectSkeleton />
        <ProjectSkeleton />
        <ProjectSkeleton />
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-6">
        <h3 className="text-red-800 font-bold mb-2">Error Loading Projects</h3>
        <p className="text-red-600">{error}</p>
        <button
          onClick={loadProjects}
          className="mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
        >
          Retry
        </button>
      </div>
    );
  }

  // Empty state
  if (projects.length === 0) {
    return (
      <div className="text-center py-12">
        <h3 className="text-xl font-bold text-gray-900 mb-2">
          No Projects Yet
        </h3>
        <p className="text-gray-600 mb-4">
          Create your first project to get started
        </p>
        <button className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Create Project
        </button>
      </div>
    );
  }

  // Projects list
  return (
    <div>
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">
          My Projects ({projects.length})
        </h2>
        <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          New Project
        </button>
      </div>

      <div className="space-y-4">
        {projects.map(project => (
          <ProjectCard key={project.id} project={project} />
        ))}
      </div>
    </div>
  );
}
