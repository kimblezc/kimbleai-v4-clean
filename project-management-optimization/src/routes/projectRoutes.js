/**
 * Project Routes with Cache Integration
 * Generated by Archie - Autonomous Agent
 *
 * Purpose: Integrate caching layer into project API routes
 * Impact: Instant page loads for repeat visits
 * Risk Level: LOW
 */

const express = require('express');
const router = express.Router();
const { getProjects, getProjectWithDetails } = require('../database/queries');
const { getOrSet, CacheKeys, invalidateUserCache, invalidateProjectCache } = require('../cache/cache');

/**
 * GET /api/projects
 * List all projects for current user (with caching)
 */
router.get('/', async (req, res) => {
  try {
    const userId = req.user.id; // From auth middleware

    const projects = await getOrSet(
      CacheKeys.userProjects(userId),
      async () => {
        const result = await getProjects(req.db, userId);
        return result.rows;
      },
      300 // 5 minute TTL
    );

    res.json({
      success: true,
      projects,
      cached: true, // Client can show cache indicator if needed
      count: projects.length
    });
  } catch (error) {
    console.error('[PROJECT LIST ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch projects'
    });
  }
});

/**
 * GET /api/projects/:id
 * Get single project with details (with caching)
 */
router.get('/:id', async (req, res) => {
  try {
    const userId = req.user.id;
    const projectId = req.params.id;

    const project = await getOrSet(
      CacheKeys.projectDetails(projectId),
      async () => {
        const result = await getProjectWithDetails(req.db, projectId, userId);
        return result.rows[0];
      },
      600 // 10 minute TTL for project details
    );

    if (!project) {
      return res.status(404).json({
        success: false,
        error: 'Project not found'
      });
    }

    res.json({
      success: true,
      project
    });
  } catch (error) {
    console.error('[PROJECT DETAILS ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch project details'
    });
  }
});

/**
 * POST /api/projects
 * Create new project (invalidates cache)
 */
router.post('/', async (req, res) => {
  try {
    const userId = req.user.id;
    const { name, description } = req.body;

    // Create project (not shown - use your existing logic)
    const newProject = await createProject(req.db, userId, name, description);

    // Invalidate user's project cache
    invalidateUserCache(userId);

    res.status(201).json({
      success: true,
      project: newProject
    });
  } catch (error) {
    console.error('[PROJECT CREATE ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Failed to create project'
    });
  }
});

/**
 * PUT /api/projects/:id
 * Update project (invalidates cache)
 */
router.put('/:id', async (req, res) => {
  try {
    const userId = req.user.id;
    const projectId = req.params.id;
    const updates = req.body;

    // Update project (not shown - use your existing logic)
    const updatedProject = await updateProject(req.db, projectId, userId, updates);

    // Invalidate caches
    invalidateUserCache(userId);
    invalidateProjectCache(projectId);

    res.json({
      success: true,
      project: updatedProject
    });
  } catch (error) {
    console.error('[PROJECT UPDATE ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Failed to update project'
    });
  }
});

/**
 * DELETE /api/projects/:id
 * Delete project (invalidates cache)
 */
router.delete('/:id', async (req, res) => {
  try {
    const userId = req.user.id;
    const projectId = req.params.id;

    // Delete project (not shown - use your existing logic)
    await deleteProject(req.db, projectId, userId);

    // Invalidate caches
    invalidateUserCache(userId);
    invalidateProjectCache(projectId);

    res.json({
      success: true,
      message: 'Project deleted'
    });
  } catch (error) {
    console.error('[PROJECT DELETE ERROR]', error);
    res.status(500).json({
      success: false,
      error: 'Failed to delete project'
    });
  }
});

module.exports = router;
