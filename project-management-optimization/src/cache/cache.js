/**
 * NodeCache Utility for Project Data
 * Generated by Archie - Autonomous Agent
 *
 * Purpose: Stores project lists in memory for 5 minutes
 * Impact: Second page load = instant (no database query needed)
 * Risk Level: LOW
 */

const NodeCache = require('node-cache');

/**
 * Cache configuration
 * - TTL: 300 seconds (5 minutes)
 * - Check period: 60 seconds (cleanup expired items)
 * - Max keys: 1000 (prevent memory overflow)
 */
const cache = new NodeCache({
  stdTTL: 300,          // 5 minute default TTL
  checkperiod: 60,      // Check for expired keys every minute
  maxKeys: 1000,        // Limit cache size
  useClones: false      // Don't clone objects (faster but be careful with mutations)
});

/**
 * Cache keys generator
 */
const CacheKeys = {
  userProjects: (userId) => `projects:user:${userId}`,
  projectDetails: (projectId) => `project:${projectId}`,
  projectTasks: (projectId) => `tasks:project:${projectId}`,
  userStats: (userId) => `stats:user:${userId}`
};

/**
 * Get from cache with optional refresh function
 */
async function getOrSet(key, refreshFn, ttl = null) {
  // Try to get from cache
  const cached = cache.get(key);
  if (cached !== undefined) {
    console.log(`[CACHE HIT] ${key}`);
    return cached;
  }

  // Cache miss - fetch fresh data
  console.log(`[CACHE MISS] ${key}`);
  const freshData = await refreshFn();

  // Store in cache
  if (ttl) {
    cache.set(key, freshData, ttl);
  } else {
    cache.set(key, freshData);
  }

  return freshData;
}

/**
 * Invalidate cache for a user
 * Call this when project data changes
 */
function invalidateUserCache(userId) {
  const keysToDelete = cache.keys().filter(key =>
    key.includes(`user:${userId}`)
  );

  keysToDelete.forEach(key => cache.del(key));
  console.log(`[CACHE INVALIDATE] Cleared ${keysToDelete.length} keys for user ${userId}`);
}

/**
 * Invalidate cache for a specific project
 */
function invalidateProjectCache(projectId) {
  const keysToDelete = cache.keys().filter(key =>
    key.includes(`project:${projectId}`) || key.includes(`:project:${projectId}`)
  );

  keysToDelete.forEach(key => cache.del(key));
  console.log(`[CACHE INVALIDATE] Cleared ${keysToDelete.length} keys for project ${projectId}`);
}

/**
 * Get cache statistics
 */
function getCacheStats() {
  return {
    keys: cache.keys().length,
    hits: cache.getStats().hits,
    misses: cache.getStats().misses,
    ksize: cache.getStats().ksize,
    vsize: cache.getStats().vsize,
    hit_rate: cache.getStats().hits / (cache.getStats().hits + cache.getStats().misses) || 0
  };
}

/**
 * Clear all cache (use sparingly!)
 */
function clearAll() {
  cache.flushAll();
  console.log('[CACHE] All keys cleared');
}

module.exports = {
  cache,
  CacheKeys,
  getOrSet,
  invalidateUserCache,
  invalidateProjectCache,
  getCacheStats,
  clearAll
};
