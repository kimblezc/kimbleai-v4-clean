"""
5-Minute Cache Layer
Generated by Archie - Autonomous Agent

Purpose: Saves search results for 5 minutes so you don't re-fetch the same emails
Impact: Instant results for repeat searches
Risk Level: LOW
"""

from datetime import datetime, timedelta
from typing import Any, Optional, Dict
import hashlib
import json


class EmailCache:
    """Simple in-memory cache with TTL (Time To Live)"""

    def __init__(self, ttl_minutes: int = 5):
        """
        Initialize cache with TTL.

        Args:
            ttl_minutes: How long to keep cached items (default 5 minutes)
        """
        self.cache: Dict[str, Dict[str, Any]] = {}
        self.ttl = timedelta(minutes=ttl_minutes)

    def _generate_key(self, query: str, filters: Optional[Dict] = None) -> str:
        """
        Generate cache key from query and filters.

        Args:
            query: Search query
            filters: Optional search filters

        Returns:
            Cache key (hash)
        """
        cache_input = {
            'query': query.lower().strip(),
            'filters': filters or {}
        }

        # Create deterministic hash
        json_str = json.dumps(cache_input, sort_keys=True)
        return hashlib.md5(json_str.encode()).hexdigest()

    def get(self, query: str, filters: Optional[Dict] = None) -> Optional[Any]:
        """
        Get cached results if available and not expired.

        Args:
            query: Search query
            filters: Optional search filters

        Returns:
            Cached results or None if not found/expired
        """
        key = self._generate_key(query, filters)

        if key not in self.cache:
            return None

        cached_item = self.cache[key]

        # Check if expired
        if datetime.now() > cached_item['expires_at']:
            # Remove expired item
            del self.cache[key]
            return None

        # Return cached data
        return cached_item['data']

    def set(self, query: str, data: Any, filters: Optional[Dict] = None) -> None:
        """
        Store results in cache.

        Args:
            query: Search query
            data: Results to cache
            filters: Optional search filters
        """
        key = self._generate_key(query, filters)

        self.cache[key] = {
            'data': data,
            'expires_at': datetime.now() + self.ttl,
            'created_at': datetime.now()
        }

    def clear(self) -> None:
        """Clear all cached items"""
        self.cache = {}

    def cleanup_expired(self) -> int:
        """
        Remove all expired items from cache.

        Returns:
            Number of items removed
        """
        now = datetime.now()
        expired_keys = [
            key for key, item in self.cache.items()
            if now > item['expires_at']
        ]

        for key in expired_keys:
            del self.cache[key]

        return len(expired_keys)


if __name__ == '__main__':
    # Test
    print("Testing email cache...")

    cache = EmailCache(ttl_minutes=5)

    # Store some results
    cache.set('project update', ['email1', 'email2', 'email3'])

    # Retrieve immediately (should hit cache)
    result = cache.get('project update')
    print(f"Cache hit: {result}")

    # Different query (should miss)
    result = cache.get('meeting notes')
    print(f"Cache miss: {result}")

    # Test expiration
    import time
    cache.ttl = timedelta(seconds=1)
    cache.set('test', ['data'])
    print(f"Before expiry: {cache.get('test')}")
    time.sleep(2)
    print(f"After expiry: {cache.get('test')}")
