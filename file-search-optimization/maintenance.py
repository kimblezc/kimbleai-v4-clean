"""
Automated Cleanup for Vector Database
Generated by Archie - Autonomous Agent

Purpose: Runs nightly to clean old/unused vectors
Impact: Keeps database lean and fast
Risk Level: LOW
"""

from datetime import datetime, timedelta
from typing import List, Dict, Any
import json


class VectorDatabaseMaintenance:
    """Automated maintenance tasks for vector database"""

    def __init__(self, retention_days: int = 90):
        """
        Initialize maintenance manager.

        Args:
            retention_days: Days to retain embeddings (default 90)
        """
        self.retention_days = retention_days
        self.cleanup_log: List[Dict[str, Any]] = []

    def cleanup_old_embeddings(self, embeddings_with_dates: List[Dict]) -> List[str]:
        """
        Remove embeddings older than retention period.

        Args:
            embeddings_with_dates: List of dicts with 'id', 'created_at', 'last_accessed'

        Returns:
            List of removed embedding IDs
        """
        cutoff_date = datetime.now() - timedelta(days=self.retention_days)
        removed_ids = []

        for emb in embeddings_with_dates:
            created_at = datetime.fromisoformat(emb['created_at'])
            last_accessed = datetime.fromisoformat(emb.get('last_accessed', emb['created_at']))

            # Remove if old and not recently accessed
            if created_at < cutoff_date and last_accessed < cutoff_date:
                removed_ids.append(emb['id'])

        return removed_ids

    def cleanup_orphaned_embeddings(self, embeddings: List[str], referenced_ids: List[str]) -> List[str]:
        """
        Remove embeddings that have no references in main database.

        Args:
            embeddings: List of all embedding IDs
            referenced_ids: List of embedding IDs referenced by documents

        Returns:
            List of orphaned IDs to remove
        """
        embedded_set = set(embeddings)
        referenced_set = set(referenced_ids)

        orphaned = embedded_set - referenced_set
        return list(orphaned)

    def optimize_storage(self, current_size_mb: float, max_size_mb: float = 1000) -> Dict[str, Any]:
        """
        Check if storage optimization is needed.

        Args:
            current_size_mb: Current database size in MB
            max_size_mb: Maximum allowed size (default 1000 MB = 1 GB)

        Returns:
            Optimization recommendations
        """
        usage_percent = (current_size_mb / max_size_mb) * 100

        recommendations = {
            'current_size_mb': current_size_mb,
            'max_size_mb': max_size_mb,
            'usage_percent': usage_percent,
            'needs_optimization': usage_percent > 80,
            'actions': []
        }

        if usage_percent > 90:
            recommendations['actions'].append('URGENT: Run deduplication immediately')
            recommendations['actions'].append('Consider increasing max_size or reducing retention_days')
        elif usage_percent > 80:
            recommendations['actions'].append('Run deduplication')
            recommendations['actions'].append('Clean old embeddings')

        return recommendations

    def run_scheduled_maintenance(self, database_info: Dict) -> Dict[str, Any]:
        """
        Run full maintenance cycle.

        Args:
            database_info: Dictionary with database state

        Returns:
            Maintenance report
        """
        report = {
            'timestamp': datetime.now().isoformat(),
            'tasks_run': [],
            'removed_count': 0,
            'errors': []
        }

        try:
            # Task 1: Clean old embeddings
            old_removed = self.cleanup_old_embeddings(database_info.get('embeddings', []))
            report['tasks_run'].append('cleanup_old_embeddings')
            report['removed_count'] += len(old_removed)

            # Task 2: Clean orphaned embeddings
            orphaned_removed = self.cleanup_orphaned_embeddings(
                database_info.get('embedding_ids', []),
                database_info.get('referenced_ids', [])
            )
            report['tasks_run'].append('cleanup_orphaned')
            report['removed_count'] += len(orphaned_removed)

            # Task 3: Storage optimization check
            storage_report = self.optimize_storage(
                database_info.get('current_size_mb', 0),
                database_info.get('max_size_mb', 1000)
            )
            report['tasks_run'].append('storage_optimization_check')
            report['storage_recommendations'] = storage_report

        except Exception as e:
            report['errors'].append(str(e))

        # Log this maintenance run
        self.cleanup_log.append(report)

        return report

    def get_maintenance_history(self, limit: int = 10) -> List[Dict]:
        """Get recent maintenance history"""
        return self.cleanup_log[-limit:]

    def generate_maintenance_schedule(self) -> Dict:
        """Generate recommended maintenance schedule"""
        return {
            'daily': [
                '00:00 - Run cleanup_old_embeddings',
                '01:00 - Run cleanup_orphaned_embeddings',
                '02:00 - Check storage optimization'
            ],
            'weekly': [
                'Sunday 03:00 - Run full deduplication',
                'Sunday 04:00 - Generate usage report'
            ],
            'monthly': [
                '1st of month 05:00 - Deep storage analysis',
                '1st of month 06:00 - Archive old data'
            ]
        }


if __name__ == '__main__':
    # Test
    print("Testing vector database maintenance...")

    maintenance = VectorDatabaseMaintenance(retention_days=90)

    # Simulate database state
    test_db_info = {
        'embeddings': [
            {'id': 'emb_1', 'created_at': '2025-01-01T00:00:00', 'last_accessed': '2025-01-01T00:00:00'},  # Old
            {'id': 'emb_2', 'created_at': '2025-10-15T00:00:00', 'last_accessed': '2025-10-18T00:00:00'},  # Recent
            {'id': 'emb_3', 'created_at': '2025-10-18T00:00:00', 'last_accessed': '2025-10-19T00:00:00'},  # New
        ],
        'embedding_ids': ['emb_1', 'emb_2', 'emb_3', 'emb_4'],  # emb_4 is orphaned
        'referenced_ids': ['emb_2', 'emb_3'],
        'current_size_mb': 850,
        'max_size_mb': 1000
    }

    print("\nRunning scheduled maintenance...")
    report = maintenance.run_scheduled_maintenance(test_db_info)

    print("\nMaintenance Report:")
    print(f"  Timestamp: {report['timestamp']}")
    print(f"  Tasks run: {', '.join(report['tasks_run'])}")
    print(f"  Items removed: {report['removed_count']}")

    if 'storage_recommendations' in report:
        storage = report['storage_recommendations']
        print(f"\nStorage Status:")
        print(f"  Usage: {storage['usage_percent']:.1f}%")
        print(f"  Needs optimization: {storage['needs_optimization']}")
        if storage['actions']:
            print(f"  Recommended actions:")
            for action in storage['actions']:
                print(f"    - {action}")

    print("\nMaintenance Schedule:")
    schedule = maintenance.generate_maintenance_schedule()
    for period, tasks in schedule.items():
        print(f"  {period.upper()}:")
        for task in tasks:
            print(f"    {task}")
